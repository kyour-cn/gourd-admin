// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"encoding/json"
)

const TableNameLogType = "log_type"

// LogType 日志级别
type LogType struct {
	ID     int64  `gorm:"column:id;primaryKey;autoIncrement:true;comment:<10为系统日志" json:"id"` // <10为系统日志
	AppID  int64  `gorm:"column:app_id;not null;comment:应用ID 0为通用" json:"app_id"`             // 应用ID 0为通用
	Name   string `gorm:"column:name;not null;comment:中文名称" json:"name"`                      // 中文名称
	Label  string `gorm:"column:label;not null;comment:英文别名" json:"label"`                    // 英文别名
	Remark string `gorm:"column:remark;not null;comment:备注" json:"remark"`                    // 备注
	Status int32  `gorm:"column:status;not null;default:1;comment:日志开启状态" json:"status"`      // 日志开启状态
	Color  string `gorm:"column:color;not null;comment:日志颜色 #ff0000" json:"color"`            // 日志颜色 #ff0000
}

// MarshalBinary 支持json序列化
func (m *LogType) MarshalBinary() (data []byte, err error) {
	return json.Marshal(m)
}

// UnmarshalBinary 支持json反序列化
func (m *LogType) UnmarshalBinary(data []byte) error {
	return json.Unmarshal(data, m)
}

// TableName LogType's table name
func (*LogType) TableName() string {
	return TableNameLogType
}
