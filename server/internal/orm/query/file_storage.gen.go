// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/internal/orm/model"
)

func newFileStorage(db *gorm.DB, opts ...gen.DOOption) fileStorage {
	_fileStorage := fileStorage{}

	_fileStorage.fileStorageDo.UseDB(db, opts...)
	_fileStorage.fileStorageDo.UseModel(&model.FileStorage{})

	tableName := _fileStorage.fileStorageDo.TableName()
	_fileStorage.ALL = field.NewAsterisk(tableName)
	_fileStorage.ID = field.NewInt64(tableName, "id")
	_fileStorage.Name = field.NewString(tableName, "name")
	_fileStorage.Key = field.NewString(tableName, "key")
	_fileStorage.Config = field.NewString(tableName, "config")
	_fileStorage.IsDefault = field.NewInt32(tableName, "is_default")
	_fileStorage.Status = field.NewInt32(tableName, "status")

	_fileStorage.fillFieldMap()

	return _fileStorage
}

// fileStorage 文件存储
type fileStorage struct {
	fileStorageDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String // 名称
	Key       field.String // 唯一标识
	Config    field.String // 配置
	IsDefault field.Int32  // 是否默认
	Status    field.Int32  // 状态 1=正常 0=停用

	fieldMap map[string]field.Expr
}

func (f fileStorage) Table(newTableName string) *fileStorage {
	f.fileStorageDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileStorage) As(alias string) *fileStorage {
	f.fileStorageDo.DO = *(f.fileStorageDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileStorage) updateTableName(table string) *fileStorage {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Name = field.NewString(table, "name")
	f.Key = field.NewString(table, "key")
	f.Config = field.NewString(table, "config")
	f.IsDefault = field.NewInt32(table, "is_default")
	f.Status = field.NewInt32(table, "status")

	f.fillFieldMap()

	return f
}

func (f *fileStorage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileStorage) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["key"] = f.Key
	f.fieldMap["config"] = f.Config
	f.fieldMap["is_default"] = f.IsDefault
	f.fieldMap["status"] = f.Status
}

func (f fileStorage) clone(db *gorm.DB) fileStorage {
	f.fileStorageDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileStorage) replaceDB(db *gorm.DB) fileStorage {
	f.fileStorageDo.ReplaceDB(db)
	return f
}

type fileStorageDo struct{ gen.DO }

type IFileStorageDo interface {
	gen.SubQuery
	Debug() IFileStorageDo
	WithContext(ctx context.Context) IFileStorageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileStorageDo
	WriteDB() IFileStorageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileStorageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileStorageDo
	Not(conds ...gen.Condition) IFileStorageDo
	Or(conds ...gen.Condition) IFileStorageDo
	Select(conds ...field.Expr) IFileStorageDo
	Where(conds ...gen.Condition) IFileStorageDo
	Order(conds ...field.Expr) IFileStorageDo
	Distinct(cols ...field.Expr) IFileStorageDo
	Omit(cols ...field.Expr) IFileStorageDo
	Join(table schema.Tabler, on ...field.Expr) IFileStorageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileStorageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileStorageDo
	Group(cols ...field.Expr) IFileStorageDo
	Having(conds ...gen.Condition) IFileStorageDo
	Limit(limit int) IFileStorageDo
	Offset(offset int) IFileStorageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileStorageDo
	Unscoped() IFileStorageDo
	Create(values ...*model.FileStorage) error
	CreateInBatches(values []*model.FileStorage, batchSize int) error
	Save(values ...*model.FileStorage) error
	First() (*model.FileStorage, error)
	Take() (*model.FileStorage, error)
	Last() (*model.FileStorage, error)
	Find() ([]*model.FileStorage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileStorage, err error)
	FindInBatches(result *[]*model.FileStorage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FileStorage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileStorageDo
	Assign(attrs ...field.AssignExpr) IFileStorageDo
	Joins(fields ...field.RelationField) IFileStorageDo
	Preload(fields ...field.RelationField) IFileStorageDo
	FirstOrInit() (*model.FileStorage, error)
	FirstOrCreate() (*model.FileStorage, error)
	FindByPage(offset int, limit int) (result []*model.FileStorage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileStorageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileStorageDo) Debug() IFileStorageDo {
	return f.withDO(f.DO.Debug())
}

func (f fileStorageDo) WithContext(ctx context.Context) IFileStorageDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileStorageDo) ReadDB() IFileStorageDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileStorageDo) WriteDB() IFileStorageDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileStorageDo) Session(config *gorm.Session) IFileStorageDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileStorageDo) Clauses(conds ...clause.Expression) IFileStorageDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileStorageDo) Returning(value interface{}, columns ...string) IFileStorageDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileStorageDo) Not(conds ...gen.Condition) IFileStorageDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileStorageDo) Or(conds ...gen.Condition) IFileStorageDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileStorageDo) Select(conds ...field.Expr) IFileStorageDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileStorageDo) Where(conds ...gen.Condition) IFileStorageDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileStorageDo) Order(conds ...field.Expr) IFileStorageDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileStorageDo) Distinct(cols ...field.Expr) IFileStorageDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileStorageDo) Omit(cols ...field.Expr) IFileStorageDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileStorageDo) Join(table schema.Tabler, on ...field.Expr) IFileStorageDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileStorageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileStorageDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileStorageDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileStorageDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileStorageDo) Group(cols ...field.Expr) IFileStorageDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileStorageDo) Having(conds ...gen.Condition) IFileStorageDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileStorageDo) Limit(limit int) IFileStorageDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileStorageDo) Offset(offset int) IFileStorageDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileStorageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileStorageDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileStorageDo) Unscoped() IFileStorageDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileStorageDo) Create(values ...*model.FileStorage) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileStorageDo) CreateInBatches(values []*model.FileStorage, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileStorageDo) Save(values ...*model.FileStorage) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileStorageDo) First() (*model.FileStorage, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileStorage), nil
	}
}

func (f fileStorageDo) Take() (*model.FileStorage, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileStorage), nil
	}
}

func (f fileStorageDo) Last() (*model.FileStorage, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileStorage), nil
	}
}

func (f fileStorageDo) Find() ([]*model.FileStorage, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileStorage), err
}

func (f fileStorageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileStorage, err error) {
	buf := make([]*model.FileStorage, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileStorageDo) FindInBatches(result *[]*model.FileStorage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileStorageDo) Attrs(attrs ...field.AssignExpr) IFileStorageDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileStorageDo) Assign(attrs ...field.AssignExpr) IFileStorageDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileStorageDo) Joins(fields ...field.RelationField) IFileStorageDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileStorageDo) Preload(fields ...field.RelationField) IFileStorageDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileStorageDo) FirstOrInit() (*model.FileStorage, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileStorage), nil
	}
}

func (f fileStorageDo) FirstOrCreate() (*model.FileStorage, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileStorage), nil
	}
}

func (f fileStorageDo) FindByPage(offset int, limit int) (result []*model.FileStorage, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileStorageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileStorageDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileStorageDo) Delete(models ...*model.FileStorage) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileStorageDo) withDO(do gen.Dao) *fileStorageDo {
	f.DO = *do.(*gen.DO)
	return f
}
