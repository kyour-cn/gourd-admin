// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	App         *app
	Log         *log
	LogLevel    *logLevel
	LogStatView *logStatView
	Menu        *menu
	MenuAPI     *menuAPI
	Role        *role
	User        *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	App = &Q.App
	Log = &Q.Log
	LogLevel = &Q.LogLevel
	LogStatView = &Q.LogStatView
	Menu = &Q.Menu
	MenuAPI = &Q.MenuAPI
	Role = &Q.Role
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		App:         newApp(db, opts...),
		Log:         newLog(db, opts...),
		LogLevel:    newLogLevel(db, opts...),
		LogStatView: newLogStatView(db, opts...),
		Menu:        newMenu(db, opts...),
		MenuAPI:     newMenuAPI(db, opts...),
		Role:        newRole(db, opts...),
		User:        newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	App         app
	Log         log
	LogLevel    logLevel
	LogStatView logStatView
	Menu        menu
	MenuAPI     menuAPI
	Role        role
	User        user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		App:         q.App.clone(db),
		Log:         q.Log.clone(db),
		LogLevel:    q.LogLevel.clone(db),
		LogStatView: q.LogStatView.clone(db),
		Menu:        q.Menu.clone(db),
		MenuAPI:     q.MenuAPI.clone(db),
		Role:        q.Role.clone(db),
		User:        q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		App:         q.App.replaceDB(db),
		Log:         q.Log.replaceDB(db),
		LogLevel:    q.LogLevel.replaceDB(db),
		LogStatView: q.LogStatView.replaceDB(db),
		Menu:        q.Menu.replaceDB(db),
		MenuAPI:     q.MenuAPI.replaceDB(db),
		Role:        q.Role.replaceDB(db),
		User:        q.User.replaceDB(db),
	}
}

type queryCtx struct {
	App         IAppDo
	Log         ILogDo
	LogLevel    ILogLevelDo
	LogStatView ILogStatViewDo
	Menu        IMenuDo
	MenuAPI     IMenuAPIDo
	Role        IRoleDo
	User        IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		App:         q.App.WithContext(ctx),
		Log:         q.Log.WithContext(ctx),
		LogLevel:    q.LogLevel.WithContext(ctx),
		LogStatView: q.LogStatView.WithContext(ctx),
		Menu:        q.Menu.WithContext(ctx),
		MenuAPI:     q.MenuAPI.WithContext(ctx),
		Role:        q.Role.WithContext(ctx),
		User:        q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
