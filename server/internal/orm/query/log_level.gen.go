// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gourd/internal/orm/model"
)

func newLogLevel(db *gorm.DB, opts ...gen.DOOption) logLevel {
	_logLevel := logLevel{}

	_logLevel.logLevelDo.UseDB(db, opts...)
	_logLevel.logLevelDo.UseModel(&model.LogLevel{})

	tableName := _logLevel.logLevelDo.TableName()
	_logLevel.ALL = field.NewAsterisk(tableName)
	_logLevel.ID = field.NewInt32(tableName, "id")
	_logLevel.Name = field.NewString(tableName, "name")
	_logLevel.Label = field.NewString(tableName, "label")
	_logLevel.Remark = field.NewString(tableName, "remark")
	_logLevel.Status = field.NewInt32(tableName, "status")
	_logLevel.Color = field.NewString(tableName, "color")

	_logLevel.fillFieldMap()

	return _logLevel
}

// logLevel 日志级别
type logLevel struct {
	logLevelDo

	ALL    field.Asterisk
	ID     field.Int32  // <10为系统日志
	Name   field.String // 中文名称
	Label  field.String // 英文别名
	Remark field.String // 备注
	Status field.Int32  // 日志开启状态
	Color  field.String // 日志颜色 #ff0000

	fieldMap map[string]field.Expr
}

func (l logLevel) Table(newTableName string) *logLevel {
	l.logLevelDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logLevel) As(alias string) *logLevel {
	l.logLevelDo.DO = *(l.logLevelDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logLevel) updateTableName(table string) *logLevel {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Name = field.NewString(table, "name")
	l.Label = field.NewString(table, "label")
	l.Remark = field.NewString(table, "remark")
	l.Status = field.NewInt32(table, "status")
	l.Color = field.NewString(table, "color")

	l.fillFieldMap()

	return l
}

func (l *logLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logLevel) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 6)
	l.fieldMap["id"] = l.ID
	l.fieldMap["name"] = l.Name
	l.fieldMap["label"] = l.Label
	l.fieldMap["remark"] = l.Remark
	l.fieldMap["status"] = l.Status
	l.fieldMap["color"] = l.Color
}

func (l logLevel) clone(db *gorm.DB) logLevel {
	l.logLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logLevel) replaceDB(db *gorm.DB) logLevel {
	l.logLevelDo.ReplaceDB(db)
	return l
}

type logLevelDo struct{ gen.DO }

type ILogLevelDo interface {
	gen.SubQuery
	Debug() ILogLevelDo
	WithContext(ctx context.Context) ILogLevelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogLevelDo
	WriteDB() ILogLevelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogLevelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogLevelDo
	Not(conds ...gen.Condition) ILogLevelDo
	Or(conds ...gen.Condition) ILogLevelDo
	Select(conds ...field.Expr) ILogLevelDo
	Where(conds ...gen.Condition) ILogLevelDo
	Order(conds ...field.Expr) ILogLevelDo
	Distinct(cols ...field.Expr) ILogLevelDo
	Omit(cols ...field.Expr) ILogLevelDo
	Join(table schema.Tabler, on ...field.Expr) ILogLevelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogLevelDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogLevelDo
	Group(cols ...field.Expr) ILogLevelDo
	Having(conds ...gen.Condition) ILogLevelDo
	Limit(limit int) ILogLevelDo
	Offset(offset int) ILogLevelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogLevelDo
	Unscoped() ILogLevelDo
	Create(values ...*model.LogLevel) error
	CreateInBatches(values []*model.LogLevel, batchSize int) error
	Save(values ...*model.LogLevel) error
	First() (*model.LogLevel, error)
	Take() (*model.LogLevel, error)
	Last() (*model.LogLevel, error)
	Find() ([]*model.LogLevel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogLevel, err error)
	FindInBatches(result *[]*model.LogLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LogLevel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogLevelDo
	Assign(attrs ...field.AssignExpr) ILogLevelDo
	Joins(fields ...field.RelationField) ILogLevelDo
	Preload(fields ...field.RelationField) ILogLevelDo
	FirstOrInit() (*model.LogLevel, error)
	FirstOrCreate() (*model.LogLevel, error)
	FindByPage(offset int, limit int) (result []*model.LogLevel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogLevelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logLevelDo) Debug() ILogLevelDo {
	return l.withDO(l.DO.Debug())
}

func (l logLevelDo) WithContext(ctx context.Context) ILogLevelDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logLevelDo) ReadDB() ILogLevelDo {
	return l.Clauses(dbresolver.Read)
}

func (l logLevelDo) WriteDB() ILogLevelDo {
	return l.Clauses(dbresolver.Write)
}

func (l logLevelDo) Session(config *gorm.Session) ILogLevelDo {
	return l.withDO(l.DO.Session(config))
}

func (l logLevelDo) Clauses(conds ...clause.Expression) ILogLevelDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logLevelDo) Returning(value interface{}, columns ...string) ILogLevelDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logLevelDo) Not(conds ...gen.Condition) ILogLevelDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logLevelDo) Or(conds ...gen.Condition) ILogLevelDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logLevelDo) Select(conds ...field.Expr) ILogLevelDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logLevelDo) Where(conds ...gen.Condition) ILogLevelDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logLevelDo) Order(conds ...field.Expr) ILogLevelDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logLevelDo) Distinct(cols ...field.Expr) ILogLevelDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logLevelDo) Omit(cols ...field.Expr) ILogLevelDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logLevelDo) Join(table schema.Tabler, on ...field.Expr) ILogLevelDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogLevelDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogLevelDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logLevelDo) Group(cols ...field.Expr) ILogLevelDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logLevelDo) Having(conds ...gen.Condition) ILogLevelDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logLevelDo) Limit(limit int) ILogLevelDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logLevelDo) Offset(offset int) ILogLevelDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogLevelDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logLevelDo) Unscoped() ILogLevelDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logLevelDo) Create(values ...*model.LogLevel) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logLevelDo) CreateInBatches(values []*model.LogLevel, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logLevelDo) Save(values ...*model.LogLevel) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logLevelDo) First() (*model.LogLevel, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogLevel), nil
	}
}

func (l logLevelDo) Take() (*model.LogLevel, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogLevel), nil
	}
}

func (l logLevelDo) Last() (*model.LogLevel, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogLevel), nil
	}
}

func (l logLevelDo) Find() ([]*model.LogLevel, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogLevel), err
}

func (l logLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogLevel, err error) {
	buf := make([]*model.LogLevel, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logLevelDo) FindInBatches(result *[]*model.LogLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logLevelDo) Attrs(attrs ...field.AssignExpr) ILogLevelDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logLevelDo) Assign(attrs ...field.AssignExpr) ILogLevelDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logLevelDo) Joins(fields ...field.RelationField) ILogLevelDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logLevelDo) Preload(fields ...field.RelationField) ILogLevelDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logLevelDo) FirstOrInit() (*model.LogLevel, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogLevel), nil
	}
}

func (l logLevelDo) FirstOrCreate() (*model.LogLevel, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogLevel), nil
	}
}

func (l logLevelDo) FindByPage(offset int, limit int) (result []*model.LogLevel, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logLevelDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logLevelDo) Delete(models ...*model.LogLevel) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logLevelDo) withDO(do gen.Dao) *logLevelDo {
	l.DO = *do.(*gen.DO)
	return l
}
