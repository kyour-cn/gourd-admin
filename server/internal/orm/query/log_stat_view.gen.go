// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gourd/internal/orm/model"
)

func newLogStatView(db *gorm.DB, opts ...gen.DOOption) logStatView {
	_logStatView := logStatView{}

	_logStatView.logStatViewDo.UseDB(db, opts...)
	_logStatView.logStatViewDo.UseModel(&model.LogStatView{})

	tableName := _logStatView.logStatViewDo.TableName()
	_logStatView.ALL = field.NewAsterisk(tableName)
	_logStatView.Date = field.NewString(tableName, "date")
	_logStatView.Count_ = field.NewInt64(tableName, "count")
	_logStatView.TypeName = field.NewString(tableName, "type_name")
	_logStatView.TypeID = field.NewInt32(tableName, "type_id")

	_logStatView.fillFieldMap()

	return _logStatView
}

// logStatView VIEW
type logStatView struct {
	logStatViewDo

	ALL      field.Asterisk
	Date     field.String
	Count_   field.Int64
	TypeName field.String // 日志级别名称
	TypeID   field.Int32  // 日志级别 <10为系统日志

	fieldMap map[string]field.Expr
}

func (l logStatView) Table(newTableName string) *logStatView {
	l.logStatViewDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logStatView) As(alias string) *logStatView {
	l.logStatViewDo.DO = *(l.logStatViewDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logStatView) updateTableName(table string) *logStatView {
	l.ALL = field.NewAsterisk(table)
	l.Date = field.NewString(table, "date")
	l.Count_ = field.NewInt64(table, "count")
	l.TypeName = field.NewString(table, "type_name")
	l.TypeID = field.NewInt32(table, "type_id")

	l.fillFieldMap()

	return l
}

func (l *logStatView) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logStatView) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 4)
	l.fieldMap["date"] = l.Date
	l.fieldMap["count"] = l.Count_
	l.fieldMap["type_name"] = l.TypeName
	l.fieldMap["type_id"] = l.TypeID
}

func (l logStatView) clone(db *gorm.DB) logStatView {
	l.logStatViewDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logStatView) replaceDB(db *gorm.DB) logStatView {
	l.logStatViewDo.ReplaceDB(db)
	return l
}

type logStatViewDo struct{ gen.DO }

type ILogStatViewDo interface {
	gen.SubQuery
	Debug() ILogStatViewDo
	WithContext(ctx context.Context) ILogStatViewDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogStatViewDo
	WriteDB() ILogStatViewDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogStatViewDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogStatViewDo
	Not(conds ...gen.Condition) ILogStatViewDo
	Or(conds ...gen.Condition) ILogStatViewDo
	Select(conds ...field.Expr) ILogStatViewDo
	Where(conds ...gen.Condition) ILogStatViewDo
	Order(conds ...field.Expr) ILogStatViewDo
	Distinct(cols ...field.Expr) ILogStatViewDo
	Omit(cols ...field.Expr) ILogStatViewDo
	Join(table schema.Tabler, on ...field.Expr) ILogStatViewDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogStatViewDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogStatViewDo
	Group(cols ...field.Expr) ILogStatViewDo
	Having(conds ...gen.Condition) ILogStatViewDo
	Limit(limit int) ILogStatViewDo
	Offset(offset int) ILogStatViewDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogStatViewDo
	Unscoped() ILogStatViewDo
	Create(values ...*model.LogStatView) error
	CreateInBatches(values []*model.LogStatView, batchSize int) error
	Save(values ...*model.LogStatView) error
	First() (*model.LogStatView, error)
	Take() (*model.LogStatView, error)
	Last() (*model.LogStatView, error)
	Find() ([]*model.LogStatView, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogStatView, err error)
	FindInBatches(result *[]*model.LogStatView, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LogStatView) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogStatViewDo
	Assign(attrs ...field.AssignExpr) ILogStatViewDo
	Joins(fields ...field.RelationField) ILogStatViewDo
	Preload(fields ...field.RelationField) ILogStatViewDo
	FirstOrInit() (*model.LogStatView, error)
	FirstOrCreate() (*model.LogStatView, error)
	FindByPage(offset int, limit int) (result []*model.LogStatView, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogStatViewDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logStatViewDo) Debug() ILogStatViewDo {
	return l.withDO(l.DO.Debug())
}

func (l logStatViewDo) WithContext(ctx context.Context) ILogStatViewDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logStatViewDo) ReadDB() ILogStatViewDo {
	return l.Clauses(dbresolver.Read)
}

func (l logStatViewDo) WriteDB() ILogStatViewDo {
	return l.Clauses(dbresolver.Write)
}

func (l logStatViewDo) Session(config *gorm.Session) ILogStatViewDo {
	return l.withDO(l.DO.Session(config))
}

func (l logStatViewDo) Clauses(conds ...clause.Expression) ILogStatViewDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logStatViewDo) Returning(value interface{}, columns ...string) ILogStatViewDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logStatViewDo) Not(conds ...gen.Condition) ILogStatViewDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logStatViewDo) Or(conds ...gen.Condition) ILogStatViewDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logStatViewDo) Select(conds ...field.Expr) ILogStatViewDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logStatViewDo) Where(conds ...gen.Condition) ILogStatViewDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logStatViewDo) Order(conds ...field.Expr) ILogStatViewDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logStatViewDo) Distinct(cols ...field.Expr) ILogStatViewDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logStatViewDo) Omit(cols ...field.Expr) ILogStatViewDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logStatViewDo) Join(table schema.Tabler, on ...field.Expr) ILogStatViewDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logStatViewDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogStatViewDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logStatViewDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogStatViewDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logStatViewDo) Group(cols ...field.Expr) ILogStatViewDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logStatViewDo) Having(conds ...gen.Condition) ILogStatViewDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logStatViewDo) Limit(limit int) ILogStatViewDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logStatViewDo) Offset(offset int) ILogStatViewDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logStatViewDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogStatViewDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logStatViewDo) Unscoped() ILogStatViewDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logStatViewDo) Create(values ...*model.LogStatView) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logStatViewDo) CreateInBatches(values []*model.LogStatView, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logStatViewDo) Save(values ...*model.LogStatView) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logStatViewDo) First() (*model.LogStatView, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogStatView), nil
	}
}

func (l logStatViewDo) Take() (*model.LogStatView, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogStatView), nil
	}
}

func (l logStatViewDo) Last() (*model.LogStatView, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogStatView), nil
	}
}

func (l logStatViewDo) Find() ([]*model.LogStatView, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogStatView), err
}

func (l logStatViewDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogStatView, err error) {
	buf := make([]*model.LogStatView, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logStatViewDo) FindInBatches(result *[]*model.LogStatView, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logStatViewDo) Attrs(attrs ...field.AssignExpr) ILogStatViewDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logStatViewDo) Assign(attrs ...field.AssignExpr) ILogStatViewDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logStatViewDo) Joins(fields ...field.RelationField) ILogStatViewDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logStatViewDo) Preload(fields ...field.RelationField) ILogStatViewDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logStatViewDo) FirstOrInit() (*model.LogStatView, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogStatView), nil
	}
}

func (l logStatViewDo) FirstOrCreate() (*model.LogStatView, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogStatView), nil
	}
}

func (l logStatViewDo) FindByPage(offset int, limit int) (result []*model.LogStatView, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logStatViewDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logStatViewDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logStatViewDo) Delete(models ...*model.LogStatView) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logStatViewDo) withDO(do gen.Dao) *logStatViewDo {
	l.DO = *do.(*gen.DO)
	return l
}
