// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/internal/orm/model"
)

func newLogType(db *gorm.DB, opts ...gen.DOOption) logType {
	_logType := logType{}

	_logType.logTypeDo.UseDB(db, opts...)
	_logType.logTypeDo.UseModel(&model.LogType{})

	tableName := _logType.logTypeDo.TableName()
	_logType.ALL = field.NewAsterisk(tableName)
	_logType.ID = field.NewInt64(tableName, "id")
	_logType.AppID = field.NewInt64(tableName, "app_id")
	_logType.Name = field.NewString(tableName, "name")
	_logType.Label = field.NewString(tableName, "label")
	_logType.Remark = field.NewString(tableName, "remark")
	_logType.Status = field.NewInt32(tableName, "status")
	_logType.Color = field.NewString(tableName, "color")

	_logType.fillFieldMap()

	return _logType
}

// logType 日志级别
type logType struct {
	logTypeDo

	ALL    field.Asterisk
	ID     field.Int64  // <10为系统日志
	AppID  field.Int64  // 应用ID 0为通用
	Name   field.String // 中文名称
	Label  field.String // 英文别名
	Remark field.String // 备注
	Status field.Int32  // 日志开启状态
	Color  field.String // 日志颜色 #ff0000

	fieldMap map[string]field.Expr
}

func (l logType) Table(newTableName string) *logType {
	l.logTypeDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logType) As(alias string) *logType {
	l.logTypeDo.DO = *(l.logTypeDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logType) updateTableName(table string) *logType {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.AppID = field.NewInt64(table, "app_id")
	l.Name = field.NewString(table, "name")
	l.Label = field.NewString(table, "label")
	l.Remark = field.NewString(table, "remark")
	l.Status = field.NewInt32(table, "status")
	l.Color = field.NewString(table, "color")

	l.fillFieldMap()

	return l
}

func (l *logType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logType) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["id"] = l.ID
	l.fieldMap["app_id"] = l.AppID
	l.fieldMap["name"] = l.Name
	l.fieldMap["label"] = l.Label
	l.fieldMap["remark"] = l.Remark
	l.fieldMap["status"] = l.Status
	l.fieldMap["color"] = l.Color
}

func (l logType) clone(db *gorm.DB) logType {
	l.logTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logType) replaceDB(db *gorm.DB) logType {
	l.logTypeDo.ReplaceDB(db)
	return l
}

type logTypeDo struct{ gen.DO }

type ILogTypeDo interface {
	gen.SubQuery
	Debug() ILogTypeDo
	WithContext(ctx context.Context) ILogTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogTypeDo
	WriteDB() ILogTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogTypeDo
	Not(conds ...gen.Condition) ILogTypeDo
	Or(conds ...gen.Condition) ILogTypeDo
	Select(conds ...field.Expr) ILogTypeDo
	Where(conds ...gen.Condition) ILogTypeDo
	Order(conds ...field.Expr) ILogTypeDo
	Distinct(cols ...field.Expr) ILogTypeDo
	Omit(cols ...field.Expr) ILogTypeDo
	Join(table schema.Tabler, on ...field.Expr) ILogTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogTypeDo
	Group(cols ...field.Expr) ILogTypeDo
	Having(conds ...gen.Condition) ILogTypeDo
	Limit(limit int) ILogTypeDo
	Offset(offset int) ILogTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogTypeDo
	Unscoped() ILogTypeDo
	Create(values ...*model.LogType) error
	CreateInBatches(values []*model.LogType, batchSize int) error
	Save(values ...*model.LogType) error
	First() (*model.LogType, error)
	Take() (*model.LogType, error)
	Last() (*model.LogType, error)
	Find() ([]*model.LogType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogType, err error)
	FindInBatches(result *[]*model.LogType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LogType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogTypeDo
	Assign(attrs ...field.AssignExpr) ILogTypeDo
	Joins(fields ...field.RelationField) ILogTypeDo
	Preload(fields ...field.RelationField) ILogTypeDo
	FirstOrInit() (*model.LogType, error)
	FirstOrCreate() (*model.LogType, error)
	FindByPage(offset int, limit int) (result []*model.LogType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logTypeDo) Debug() ILogTypeDo {
	return l.withDO(l.DO.Debug())
}

func (l logTypeDo) WithContext(ctx context.Context) ILogTypeDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logTypeDo) ReadDB() ILogTypeDo {
	return l.Clauses(dbresolver.Read)
}

func (l logTypeDo) WriteDB() ILogTypeDo {
	return l.Clauses(dbresolver.Write)
}

func (l logTypeDo) Session(config *gorm.Session) ILogTypeDo {
	return l.withDO(l.DO.Session(config))
}

func (l logTypeDo) Clauses(conds ...clause.Expression) ILogTypeDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logTypeDo) Returning(value interface{}, columns ...string) ILogTypeDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logTypeDo) Not(conds ...gen.Condition) ILogTypeDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logTypeDo) Or(conds ...gen.Condition) ILogTypeDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logTypeDo) Select(conds ...field.Expr) ILogTypeDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logTypeDo) Where(conds ...gen.Condition) ILogTypeDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logTypeDo) Order(conds ...field.Expr) ILogTypeDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logTypeDo) Distinct(cols ...field.Expr) ILogTypeDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logTypeDo) Omit(cols ...field.Expr) ILogTypeDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logTypeDo) Join(table schema.Tabler, on ...field.Expr) ILogTypeDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogTypeDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogTypeDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logTypeDo) Group(cols ...field.Expr) ILogTypeDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logTypeDo) Having(conds ...gen.Condition) ILogTypeDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logTypeDo) Limit(limit int) ILogTypeDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logTypeDo) Offset(offset int) ILogTypeDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogTypeDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logTypeDo) Unscoped() ILogTypeDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logTypeDo) Create(values ...*model.LogType) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logTypeDo) CreateInBatches(values []*model.LogType, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logTypeDo) Save(values ...*model.LogType) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logTypeDo) First() (*model.LogType, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogType), nil
	}
}

func (l logTypeDo) Take() (*model.LogType, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogType), nil
	}
}

func (l logTypeDo) Last() (*model.LogType, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogType), nil
	}
}

func (l logTypeDo) Find() ([]*model.LogType, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogType), err
}

func (l logTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogType, err error) {
	buf := make([]*model.LogType, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logTypeDo) FindInBatches(result *[]*model.LogType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logTypeDo) Attrs(attrs ...field.AssignExpr) ILogTypeDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logTypeDo) Assign(attrs ...field.AssignExpr) ILogTypeDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logTypeDo) Joins(fields ...field.RelationField) ILogTypeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logTypeDo) Preload(fields ...field.RelationField) ILogTypeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logTypeDo) FirstOrInit() (*model.LogType, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogType), nil
	}
}

func (l logTypeDo) FirstOrCreate() (*model.LogType, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogType), nil
	}
}

func (l logTypeDo) FindByPage(offset int, limit int) (result []*model.LogType, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logTypeDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logTypeDo) Delete(models ...*model.LogType) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logTypeDo) withDO(do gen.Dao) *logTypeDo {
	l.DO = *do.(*gen.DO)
	return l
}
