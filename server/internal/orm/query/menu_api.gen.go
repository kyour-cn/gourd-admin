// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gourd/internal/orm/model"
)

func newMenuAPI(db *gorm.DB, opts ...gen.DOOption) menuAPI {
	_menuAPI := menuAPI{}

	_menuAPI.menuAPIDo.UseDB(db, opts...)
	_menuAPI.menuAPIDo.UseModel(&model.MenuAPI{})

	tableName := _menuAPI.menuAPIDo.TableName()
	_menuAPI.ALL = field.NewAsterisk(tableName)
	_menuAPI.ID = field.NewInt32(tableName, "id")
	_menuAPI.AppID = field.NewInt32(tableName, "app_id")
	_menuAPI.MenuID = field.NewInt32(tableName, "menu_id")
	_menuAPI.Path = field.NewString(tableName, "path")
	_menuAPI.Tag = field.NewString(tableName, "tag")

	_menuAPI.fillFieldMap()

	return _menuAPI
}

type menuAPI struct {
	menuAPIDo

	ALL    field.Asterisk
	ID     field.Int32
	AppID  field.Int32  // 应用ID
	MenuID field.Int32  // 菜单ID
	Path   field.String // API路由地址
	Tag    field.String // 标识

	fieldMap map[string]field.Expr
}

func (m menuAPI) Table(newTableName string) *menuAPI {
	m.menuAPIDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m menuAPI) As(alias string) *menuAPI {
	m.menuAPIDo.DO = *(m.menuAPIDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *menuAPI) updateTableName(table string) *menuAPI {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.AppID = field.NewInt32(table, "app_id")
	m.MenuID = field.NewInt32(table, "menu_id")
	m.Path = field.NewString(table, "path")
	m.Tag = field.NewString(table, "tag")

	m.fillFieldMap()

	return m
}

func (m *menuAPI) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *menuAPI) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["id"] = m.ID
	m.fieldMap["app_id"] = m.AppID
	m.fieldMap["menu_id"] = m.MenuID
	m.fieldMap["path"] = m.Path
	m.fieldMap["tag"] = m.Tag
}

func (m menuAPI) clone(db *gorm.DB) menuAPI {
	m.menuAPIDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m menuAPI) replaceDB(db *gorm.DB) menuAPI {
	m.menuAPIDo.ReplaceDB(db)
	return m
}

type menuAPIDo struct{ gen.DO }

type IMenuAPIDo interface {
	gen.SubQuery
	Debug() IMenuAPIDo
	WithContext(ctx context.Context) IMenuAPIDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMenuAPIDo
	WriteDB() IMenuAPIDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMenuAPIDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMenuAPIDo
	Not(conds ...gen.Condition) IMenuAPIDo
	Or(conds ...gen.Condition) IMenuAPIDo
	Select(conds ...field.Expr) IMenuAPIDo
	Where(conds ...gen.Condition) IMenuAPIDo
	Order(conds ...field.Expr) IMenuAPIDo
	Distinct(cols ...field.Expr) IMenuAPIDo
	Omit(cols ...field.Expr) IMenuAPIDo
	Join(table schema.Tabler, on ...field.Expr) IMenuAPIDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMenuAPIDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMenuAPIDo
	Group(cols ...field.Expr) IMenuAPIDo
	Having(conds ...gen.Condition) IMenuAPIDo
	Limit(limit int) IMenuAPIDo
	Offset(offset int) IMenuAPIDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMenuAPIDo
	Unscoped() IMenuAPIDo
	Create(values ...*model.MenuAPI) error
	CreateInBatches(values []*model.MenuAPI, batchSize int) error
	Save(values ...*model.MenuAPI) error
	First() (*model.MenuAPI, error)
	Take() (*model.MenuAPI, error)
	Last() (*model.MenuAPI, error)
	Find() ([]*model.MenuAPI, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MenuAPI, err error)
	FindInBatches(result *[]*model.MenuAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MenuAPI) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMenuAPIDo
	Assign(attrs ...field.AssignExpr) IMenuAPIDo
	Joins(fields ...field.RelationField) IMenuAPIDo
	Preload(fields ...field.RelationField) IMenuAPIDo
	FirstOrInit() (*model.MenuAPI, error)
	FirstOrCreate() (*model.MenuAPI, error)
	FindByPage(offset int, limit int) (result []*model.MenuAPI, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMenuAPIDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m menuAPIDo) Debug() IMenuAPIDo {
	return m.withDO(m.DO.Debug())
}

func (m menuAPIDo) WithContext(ctx context.Context) IMenuAPIDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m menuAPIDo) ReadDB() IMenuAPIDo {
	return m.Clauses(dbresolver.Read)
}

func (m menuAPIDo) WriteDB() IMenuAPIDo {
	return m.Clauses(dbresolver.Write)
}

func (m menuAPIDo) Session(config *gorm.Session) IMenuAPIDo {
	return m.withDO(m.DO.Session(config))
}

func (m menuAPIDo) Clauses(conds ...clause.Expression) IMenuAPIDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m menuAPIDo) Returning(value interface{}, columns ...string) IMenuAPIDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m menuAPIDo) Not(conds ...gen.Condition) IMenuAPIDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m menuAPIDo) Or(conds ...gen.Condition) IMenuAPIDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m menuAPIDo) Select(conds ...field.Expr) IMenuAPIDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m menuAPIDo) Where(conds ...gen.Condition) IMenuAPIDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m menuAPIDo) Order(conds ...field.Expr) IMenuAPIDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m menuAPIDo) Distinct(cols ...field.Expr) IMenuAPIDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m menuAPIDo) Omit(cols ...field.Expr) IMenuAPIDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m menuAPIDo) Join(table schema.Tabler, on ...field.Expr) IMenuAPIDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m menuAPIDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMenuAPIDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m menuAPIDo) RightJoin(table schema.Tabler, on ...field.Expr) IMenuAPIDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m menuAPIDo) Group(cols ...field.Expr) IMenuAPIDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m menuAPIDo) Having(conds ...gen.Condition) IMenuAPIDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m menuAPIDo) Limit(limit int) IMenuAPIDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m menuAPIDo) Offset(offset int) IMenuAPIDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m menuAPIDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMenuAPIDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m menuAPIDo) Unscoped() IMenuAPIDo {
	return m.withDO(m.DO.Unscoped())
}

func (m menuAPIDo) Create(values ...*model.MenuAPI) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m menuAPIDo) CreateInBatches(values []*model.MenuAPI, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m menuAPIDo) Save(values ...*model.MenuAPI) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m menuAPIDo) First() (*model.MenuAPI, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAPI), nil
	}
}

func (m menuAPIDo) Take() (*model.MenuAPI, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAPI), nil
	}
}

func (m menuAPIDo) Last() (*model.MenuAPI, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAPI), nil
	}
}

func (m menuAPIDo) Find() ([]*model.MenuAPI, error) {
	result, err := m.DO.Find()
	return result.([]*model.MenuAPI), err
}

func (m menuAPIDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MenuAPI, err error) {
	buf := make([]*model.MenuAPI, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m menuAPIDo) FindInBatches(result *[]*model.MenuAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m menuAPIDo) Attrs(attrs ...field.AssignExpr) IMenuAPIDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m menuAPIDo) Assign(attrs ...field.AssignExpr) IMenuAPIDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m menuAPIDo) Joins(fields ...field.RelationField) IMenuAPIDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m menuAPIDo) Preload(fields ...field.RelationField) IMenuAPIDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m menuAPIDo) FirstOrInit() (*model.MenuAPI, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAPI), nil
	}
}

func (m menuAPIDo) FirstOrCreate() (*model.MenuAPI, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAPI), nil
	}
}

func (m menuAPIDo) FindByPage(offset int, limit int) (result []*model.MenuAPI, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m menuAPIDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m menuAPIDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m menuAPIDo) Delete(models ...*model.MenuAPI) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *menuAPIDo) withDO(do gen.Dao) *menuAPIDo {
	m.DO = *do.(*gen.DO)
	return m
}
